/components
Material.Design.jsx
Ejercicio para filtrar el contenido de un array mediante 2 parámetros en 2 input. El cada elemento del array es
un objeto con varios atributos de los que haremos un filtro OR (||).
(https://611digital.com/que-es-material-ui-y-por-que-deberiamos-usarlo/)
Se usa Material UI que es una librería de componentes de React.js, de código abierto creada por Google, basada 
en Material Design, la cual nos brinda una serie de pautas y lineamientos que sientan la base para crear 
diseños profesionales para aplicaciones web en muy poco tiempo.
tenemos que instalar las siguientes librerías
npm install @mui/material @emotion/react @emotion/styled  <--- estos son como mínimos los que hay que instalar
npm install @fontsource/roboto
npm install @mui/icons-material

Luego crear un archivo theme.js en el directorio donde esta App.js:
import { createTheme } from "@mui/material/styles";

const theme = createTheme({
  palette: {
    primary: {
      main: "#1976d2", // Blue
    },
    secondary: {
      main: "#dc004e", // Pink
    },
    background: {
      default: "#f5f5f5", // Light gray background
      paper: "#ffffff",
    },
  },
  typography: {
    fontFamily: "'Roboto', sans-serif",
    h1: {
      fontSize: "2rem",
      fontWeight: 600,
    },
    body1: {
      fontSize: "1rem",
    },
  },
  components: {
    MuiButton: {
      styleOverrides: {
        root: {
          borderRadius: "8px",
          textTransform: "none",
        },
      },
    },
  },
});

export default theme;


Luego envolver nuestra aplicaciones con ThemeProvider añadiendo lo siguiente a index.jsx
// aplicamos el theme
import { ThemeProvider } from '@emotion/react';
// importamos características de distintos navegadores
// que puedan tener problemas con el "theme"
import CssBaseline from "@mui/material/CssBaseline";
import theme from './theme'; // importamos tema

const root = ReactDOM.createRoot(document.getElementById('root'));
root.render(
  <React.StrictMode>
   <ThemeProvider theme={theme}>
      <CssBaseline /> 
      <BrowserRouter>
        <App />
      </BrowserRouter>
    </ThemeProvider>
  </React.StrictMode>
);

Para acceder al Theme en un componente:
import React from "react";
import { Button, Typography, Box } from "@mui/material";

const ThemedComponent = () => {
  const theme = useTheme(); // Access the theme

  return (
    <Box
      sx={{
        backgroundColor: theme.palette.background.default,
        padding: theme.spacing(2),
        borderRadius: theme.shape.borderRadius,
      }}
    >
      <Typography variant="h4" color={theme.palette.primary.main}>
        Themed Component
      </Typography>
      <Button variant="contained" color="secondary">
        Themed Button
      </Button>
    </Box>
  );
};

export default ThemedComponent;



/Gemini/Gemini.jsx y Gemini copy.jsx
Los ejercicios son iguales, la única diferencia es cómo se pueden llamar los componente MUI usados en el 
ejercicio:
    import CircularProgress from '@mui/material/CircularProgress';
    import Paper from '@mui/material/Paper';
el igual que:
    import { Paper, CircularProgress } from '@mui/material';
Ejercicio en el que usamos Gemini AI para llamanado a su API. Para poder hacer la llamada tenemos que añadir la 
librería @google/genai.
Este ejercicio usa MUI (https://mui.com/ que es un estilo a bootStrap) para usar varios componentes:
Typography para escribir texto con h1, h3, varios, ...
Box para crear un contenedor div pero con esteroides, en este ejercicio lo que hacemos es mostrar un array de objetos
TextField para crear un input, donde metemos nuestras frases
Button para (obvio) crear botones, se usan distintos atributos para estilar
Grid para crear adivina... Grid!!, con sus distintos tipos de columnas según resoluciones


